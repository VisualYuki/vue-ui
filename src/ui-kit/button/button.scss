@use '/src/theme/scss/utils' as *;
@use '/src/theme/scss/override-vars' as *;
@use 'sass:map';

@include b(button) {
	@include set-local-css-vars('button', $button);
}

@mixin button-variant($type) {
	$button-color-types: (
		'': (
			'text-color': (
				'color',
				'white'
			),
			'bg-color': (
				'color',
				$type
			),
			'border-color': (
				'color',
				$type
			),
			'outline-color': (
				'color',
				$type,
				'light-5'
			),
			'active-color': (
				'color',
				$type,
				'dark-2'
			)
		),
		'hover': (
			'text-color': (
				'color',
				'white'
			),
			'link-text-color': (
				'color',
				$type,
				'light-5'
			),
			'bg-color': (
				'color',
				$type,
				'light-3'
			),
			'border-color': (
				'color',
				$type,
				'light-3'
			)
		),
		'active': (
			'bg-color': (
				'color',
				$type,
				'dark-2'
			),
			'border-color': (
				'color',
				$type,
				'dark-2'
			)
		),
		'disabled': (
			'text-color': (
				'color',
				'white'
			),
			'bg-color': (
				'color',
				$type,
				'light-5'
			),
			'border-color': (
				'color',
				$type,
				'light-5'
			)
		)
	);

	@each $type, $typeMap in $button-color-types {
		@each $typeColor, $list in $typeMap {
			@include set-css-var(('button', $type, $typeColor), $list);
		}
	}
}

@include b(button) {
	display: inline-flex;
	justify-content: center;
	align-items: center;

	color: getCssVar(('button', 'text-color'));
	font-weight: getCssVar(('font-weight-primary'));
	white-space: nowrap;
	cursor: pointer;
	text-align: center;
	user-select: none;

	background-color: getCssVar(('button', 'bg', 'color'));
	border: getCssVar(('border'));
	border-color: getCssVar(('button', 'border', 'color'));
	outline: none;

	&:hover {
		color: getCssVar(('button', 'hover', 'text-color'));
		background-color: getCssVar(('button', 'hover', 'bg-color'));
		border-color: getCssVar(('button', 'hover', 'border-color'));
		outline: none;
	}

	&:active {
		color: getCssVar(('button', 'active', 'text-color'));
		border-color: getCssVar(('button', 'active', 'border-color'));
		background-color: getCssVar(('button', 'active', 'bg-color'));
		outline: none;
	}

	&:focus-visible {
		outline: 2px solid getCssVar(('button', 'outline', 'color'));
		outline-offset: 1px;
	}

	& {
		padding: map.get($button-padding-vertical, 'default') map.get($button-padding-horizontal, 'default');
		font-size: map.get($button-font-size, 'default');
		border-radius: map.get($button-border-radius, 'default');
	}

	@each $size in ('small', 'large') {
		@include m($size) {
			padding: map.get($button-padding-vertical, $size) map.get($button-padding-horizontal, $size);
			font-size: map.get($button-font-size, $size);
			border-radius: map.get($button-border-radius, $size);
		}
	}

	@each $type in $color-types {
		@include m($type) {
			@include button-variant($type);
		}
	}

	@include when('disabled') {
		background-color: getCssVar(('button', 'disabled', 'bg-color'));
		color: getCssVar(('button', 'disabled', 'text-color'));
		border-color: getCssVar(('button', 'disabled', 'border-color'));
		cursor: not-allowed;
	}

	@include when(round) {
		border-radius: getCssVar(('border', 'radius', 'round'));
	}

	@include when('circle') {
		border-radius: getCssVar(('border', 'radius', 'circle'));
		padding: 8px;
	}

	// > span {
	// 	display: inline-flex;
	// 	align-items: center;
	// }

	& + & {
		margin-left: 12px;
	}
}
