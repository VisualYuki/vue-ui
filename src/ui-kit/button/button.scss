@use '/src/theme/scss/utils' as *;
@use '/src/theme/scss/override-vars' as *;
@use 'sass:map';

@include b(button) {
	@include set-local-css-vars('button', $button);
}

@mixin button-variant($type) {
	$button-color-types: (
		'': (
			'text-color': (
				'color',
				'white'
			),
			'bg-color': (
				'color',
				$type
			),
			'border-color': (
				'color',
				$type
			),
			'outline-color': (
				'color',
				$type,
				'light-5'
			),
			'active-color': (
				'color',
				$type,
				'dark-2'
			)
		),
		'hover': (
			'text-color': (
				'color',
				'white'
			),
			'link-text-color': (
				'color',
				$type,
				'light-5'
			),
			'bg-color': (
				'color',
				$type,
				'light-3'
			),
			'border-color': (
				'color',
				$type,
				'light-3'
			)
		),
		'active': (
			'bg-color': (
				'color',
				$type,
				'dark-2'
			),
			'border-color': (
				'color',
				$type,
				'dark-2'
			)
		),
		'disabled': (
			'text-color': (
				'color',
				'white'
			),
			'bg-color': (
				'color',
				$type,
				'light-5'
			),
			'border-color': (
				'color',
				$type,
				'light-5'
			)
		)
	);

	@each $type, $typeMap in $button-color-types {
		@each $typeColor, $list in $typeMap {
			@include set-css-var(('button', $type, $typeColor), $list);
		}
	}

	// &.is-plain,
	// &.is-text,
	// &.is-link {
	//   @include button-plain($type);
	// }
}

@include b(button) {
	display: inline-flex;
	justify-content: center;
	align-items: center;

	color: getCssVar(('button', 'text-color'));
	font-weight: getCssVar(('font-weight-primary'));
	white-space: nowrap;
	cursor: pointer;
	text-align: center;
	user-select: none;

	background-color: getCssVar(('button', 'bg', 'color'));
	border: getCssVar(('border'));
	border-color: getCssVar(('button', 'border', 'color'));
	outline: none;

	box-shadow:
		0px 3px 1px -2px rgba(0, 0, 0, 0.2),
		0px 2px 2px 0px rgba(0, 0, 0, 0.14),
		0px 1px 5px 0px rgba(0, 0, 0, 0.12);

	&:hover {
		color: getCssVar(('button', 'hover', 'text-color'));
		background-color: getCssVar(('button', 'hover', 'bg-color'));
		border-color: getCssVar(('button', 'hover', 'border-color'));
		outline: none;
	}

	&:active {
		color: getCssVar(('button', 'active', 'text-color'));
		border-color: getCssVar(('button', 'active', 'border-color'));
		background-color: getCssVar(('button', 'active', 'bg-color'));
		outline: none;
	}

	&:focus-visible {
		outline: 2px solid getCssVar(('button', 'outline', 'color'));
		outline-offset: 1px;
	}

	& {
		padding: map.get($button-padding-vertical, 'default') map.get($button-padding-horizontal, 'default');
		font-size: map.get($button-font-size, 'default');
		border-radius: map.get($button-border-radius, 'default');
	}

	@each $size in ('small', 'large') {
		@include m($size) {
			padding: map.get($button-padding-vertical, $size) map.get($button-padding-horizontal, $size);
			font-size: map.get($button-font-size, $size);
			border-radius: map.get($button-border-radius, $size);
		}
	}

	@include m('plain') {
		@include set-css-var(('button', 'hover', 'text', 'color'), ('color', 'primary'));
		@include set-css-var(('button', 'hover', 'bg', 'color'), ('fill-color', 'blank'));
		@include set-css-var(('button', 'hover', 'border', 'color'), ('color', 'primary'));
	}

	@each $type in $color-types {
		@include m($type) {
			@include button-variant($type);
		}
	}

	// > span {
	// 	display: inline-flex;
	// 	align-items: center;
	// }

	// & + & {
	// 	margin-left: 12px;
	// }

	// &_lg {
	// 	padding: 8px 22px;
	// }

	// &_md {
	// 	padding: 8px 16px;
	// }

	// &_sm {
	// 	padding: 8px 10px;
	// }

	@each $item in $color-types {
	}

	&_primary {
		@include b(button_contained) {
			background: rgb(25, 118, 210);
		}
	}

	// &_#{$name} {
	// }
}
